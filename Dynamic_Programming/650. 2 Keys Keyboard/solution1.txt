class Solution {
public:
    int dfs(int curr,int copy,int goal,int steps,vector<vector<int>>& dp,bool canCopy)
    {
       // if(copy==8)
        //cout<<curr<<" "<<copy<<" "<<steps<<" "<<goal<<" "<<canCopy<<endl;
        if(curr>goal)
            return INT_MAX;
        else if(curr==goal)
            return steps;
        else if(dp[curr][copy] &&steps>=dp[curr][copy])
            return dp[curr][copy];
        if(canCopy)
            dp[curr][copy]=min(dfs(curr,curr,goal,steps+1,dp,false),dfs(curr+copy,copy,goal,steps+1,dp,true));
        else
            dp[curr][copy]=dfs(curr+copy,copy,goal,steps+1,dp,true);
        return dp[curr][copy];
    }
    int minSteps(int n) {
        if(n==1)
            return 0;
        vector<vector<int>> dp(n,vector<int>(n,0));
        return dfs(1,1,n,1,dp,true);
    }
};